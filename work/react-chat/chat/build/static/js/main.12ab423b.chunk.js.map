{"version":3,"sources":["Logout.jsx","Message.jsx","Messages.jsx","User.jsx","OutGoing.jsx","MiddleWare.jsx","Login.jsx","Error.jsx","App.jsx","services.js","serviceWorker.js","index.jsx"],"names":["Logout","handleClick","className","onClick","Message","messages","sender","timestamp","text","Messages","map","message","index","key","User","users","Object","values","user","username","OutGoing","callForSendMessage","useState","setText","onKeyUp","e","target","value","type","MiddleWare","Login","callForLogin","setusername","Error","error","console","log","App","isLoggedIn","setisLoggedIn","setError","setMessages","setUsers","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","code","then","response","ok","json","result","services","data","err","useEffect","mainComponent","undefined","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOASeA,MAPf,YAA+B,IAAdC,EAAa,EAAbA,YACf,OACE,yBAAKC,UAAY,UACf,4BAAQA,UAAY,gBAAgBC,QAAWF,GAA/C,YCgBSG,MAnBf,YAA6B,IAAXC,EAAU,EAAVA,SAChB,OACE,4BACA,yBAAKH,UAAW,YACd,yBAAKA,UAAW,aACd,yBAAKA,UAAW,eACd,0BAAMA,UAAU,YAAYG,EAASC,SAEvC,yBAAKJ,UAAW,gBACd,0BAAMA,UAAW,aAAaG,EAASE,aAG3C,uBAAGL,UAAU,gBAAgBG,EAASG,SCI7BC,MAdf,YAA8B,IAAXJ,EAAU,EAAVA,SACjB,OACE,wBAAIH,UAAY,YACbG,EAASK,KAAI,SAACC,EAASC,GACtB,OACE,kBAAC,EAAD,CAASP,SAAYM,EAASE,IAAOD,SCIhCE,MAXf,YAAuB,IAARC,EAAO,EAAPA,MACb,OACE,wBAAIb,UAAY,aACbc,OAAOC,OAAOF,GAAOL,KAAI,SAACQ,EAAMN,GAC/B,OAAO,wBAAIC,IAAOD,GAAQM,EAAKC,eCYxBC,MAhBf,YAAwC,IAArBC,EAAoB,EAApBA,mBAAoB,EACbC,mBAAS,IADI,mBAC9Bd,EAD8B,KACxBe,EADwB,KASrC,OACE,yBAAKrB,UAAY,gBACf,2BAAOA,UAAY,cAAcsB,QATZ,SAACC,GACxBF,EAAQE,EAAEC,OAAOC,UASf,4BAAQC,KAAO,SAASzB,QAPR,WAClBkB,EAAmBb,GACnBe,EAAQ,MAKN,W,KCQSM,MAZf,YAAwE,IAAnDd,EAAkD,EAAlDA,MAAOV,EAA2C,EAA3CA,SAAUJ,EAAiC,EAAjCA,YAAaoB,EAAoB,EAApBA,mBACjD,OACE,yBAAKnB,UAAY,OAAjB,6CAEE,kBAAC,EAAD,CAAMa,MAASA,IACf,kBAAC,EAAD,CAAUV,SAAYA,IACtB,kBAAC,EAAD,CAAUgB,mBAAsBA,IAChC,kBAAC,EAAD,CAAQpB,YAAeA,MCAd6B,MAff,YAA+B,IAAfC,EAAc,EAAdA,aAAc,EACQT,mBAAS,IADjB,mBACjBH,EADiB,KACPa,EADO,KAQxB,OACE,yBAAK9B,UAAY,SACf,4CAAiB,2BAAOsB,QALH,SAACC,GACxBO,EAAYP,EAAEC,OAAOC,WAKnB,4BAAQzB,UAAY,eAAeC,QATnB,SAACsB,GACnBM,EAAaZ,KAQX,WCJKc,MARf,YAAwB,IAARC,EAAO,EAAPA,MAEd,OADAC,QAAQC,IAAIF,GAEV,yBAAKhC,UAAY,SACf,2BAAIgC,KCsEKG,MAnEf,WAAe,IAAD,EACwBf,oBAAS,GADjC,mBACLgB,EADK,KACOC,EADP,OAEcjB,mBAAS,IAFvB,mBAELY,EAFK,KAEEM,EAFF,OAGoBlB,mBAAS,IAH7B,mBAGLjB,EAHK,KAGKoC,EAHL,OAIcnB,mBAAS,IAJvB,mBAILP,EAJK,KAIE2B,EAJF,KAKNX,EAAe,SAACZ,ICZE,SAACA,GACzB,OAAOwB,MAAM,SAAU,CACrBC,OAAO,OACPC,QAAQ,IAAIC,QAAQ,CAClB,eAAe,qBAEjBC,KAAKC,KAAKC,UAAU,CAAC9B,eAEtB+B,OAAM,WACL,OAAOC,QAAQC,OAAO,CAACC,KAAK,qBAE7BC,MAAK,SAACC,GACL,OAAIA,EAASC,GAGND,EAASE,OAFPF,EAASE,OAAOH,MAAK,SAAAI,GAAM,OAAEP,QAAQC,OAAOM,UDArDC,CAAoBxC,GACnBmC,MAAK,SAACM,GACLlB,EAASkB,EAAK7C,OACd0B,EAAYmB,EAAKvD,UACjBmC,EAAS,IACTD,GAAc,MAEfW,OAAM,SAACW,GACNrB,EAASqB,EAAIR,UAyBnBS,qBAAU,WC4CDnB,MAAM,SAAU,CACrBC,OAAO,QAERM,OAAM,WACL,OAAOC,QAAQC,OAAO,CAACC,KAAK,qBAE7BC,MAAK,SAACC,GACL,OAAIA,EAASC,GAGND,EAASE,OAFPF,EAASE,OAAOH,MAAK,SAAAI,GAAM,OAAEP,QAAQC,OAAOM,SDlDtDJ,MAAK,SAACC,GACLhB,GAAc,GACdR,EAAa,mBAEdmB,OAAM,SAACW,GACNtB,GAAc,QAEf,IAEH,IAAIwB,OAAgBC,EAUpB,OARED,EADCzB,EACe,kBAAC,EAAD,CAAYvB,MAASA,EAAOV,SAAYA,EAAUJ,YAxBhD,WCZX0C,MAAM,UAAW,CACtBC,OAAO,WAERM,OAAM,WACL,OAAOC,QAAQC,OAAO,CAACC,KAAK,qBAE7BC,MAAK,SAACC,GACL,OAAIA,EAASC,GAGND,EAASE,OAFPF,EAASE,OAAOH,MAAK,SAAAI,GAAM,OAAEP,QAAQC,OAAOM,SDMtDJ,MAAK,WACJf,GAAc,MAEfW,OAAM,SAACW,GACNrB,EAASqB,EAAIR,UAkB+EhC,mBAnCnE,SAACV,ICcH,SAACA,GAC1B,OAAOgC,MAAM,eAAgB,CAC3BC,OAAO,OACPC,QAAQ,IAAIC,QAAQ,CAClB,eAAe,qBAEjBC,KAAKC,KAAKC,UAAU,CAACtC,cAEtBuC,OAAM,WACL,OAAOC,QAAQC,OAAO,CAACC,KAAK,qBAE7BC,MAAK,SAACC,GACL,OAAIA,EAASC,GAGND,EAASE,OAFPF,EAASE,OAAOH,MAAK,SAAAI,GAAM,OAAEP,QAAQC,OAAOM,UD1BrDC,CAAqBhD,GACpB2C,MAAK,SAACM,GACLlB,EAASkB,EAAK7C,OACd0B,EAAYmB,EAAKvD,aAElB6C,OAAM,SAACW,GACNrB,EAASqB,SA+BG,kBAAC,EAAD,CAAO9B,aAAgBA,IAMvC,yBAAK7B,UAAY,OACd6D,EACD,kBAAC,EAAD,CAAO7B,MAASA,ME3DA+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEd7B,OAAM,SAAAhB,GACLC,QAAQD,MAAMA,EAAMvB,c","file":"static/js/main.12ab423b.chunk.js","sourcesContent":["//jshint esversion: 6\nimport React from 'react';\nfunction Logout({handleClick}){\n  return(\n    <div className = \"logout\">\n      <button className = \"logout-button\" onClick = {handleClick}>logout</button>\n    </div>\n  );\n}\nexport default Logout;\n","//jshint esversion:6\nimport React from 'react';\nfunction Message({messages}){\n  return (\n    <li>\n    <div className =\"messages\">\n      <div className =\"meta-info\">\n        <div className =\"sender-info\">\n          <span className=\"username\">{messages.sender}</span>\n        </div>\n        <div className =\"message-info\">\n          <span className =\"timestamp\">{messages.timestamp}</span>\n        </div>\n      </div>\n      <p className=\"message-text\">{messages.text}</p>\n    </div>\n    </li>\n  )\n}\n\n\nexport default Message;\n","//jshint esversion: 6\nimport React from 'react';\nimport Message from './Message';\n\nfunction Messages({messages}){\n  return (\n    <ol className = \"messages\">\n      {messages.map((message, index) => {\n        return(\n          <Message messages = {message} key = {index}/>\n        )\n      })}\n    </ol>\n  )\n}\n\n\n\nexport default Messages;\n","//jshint esversion:6\nimport React from 'react';\nfunction User({users}){\n  return(\n    <ul className = \"user-list\">\n      {Object.values(users).map((user, index) => {\n        return <li key = {index}>{user.username}</li>\n      })}\n    </ul>\n  )\n}\n\n\nexport default User;\n","//jshint esversion:6\nimport React, {useState} from 'react';\nfunction OutGoing({callForSendMessage}){\n  const [text, setText] = useState('');\n  const handleUserTyping = (e) => {\n    setText(e.target.value);\n  };\n  const handleClick = () => {\n    callForSendMessage(text);\n    setText('');\n  };\n  return (\n    <div className = \"send-message\">\n      <input className = \"new-message\" onKeyUp = {handleUserTyping}></input>\n      <button type = \"submit\" onClick = {handleClick}>enter</button>\n    </div>\n  );\n}\nexport default OutGoing;\n","//jshint esversion:6\nimport React from 'react';\nimport Logout from './Logout';\nimport Messages from './Messages';\nimport User from './User';\nimport OutGoing from './OutGoing';\nimport './App.css';\n\n\n\nfunction MiddleWare({users, messages, handleClick, callForSendMessage}){\n  return (\n    <div className = \"App\">\n      Welcome to the ChatRoom my little brother!\n      <User users = {users}/>\n      <Messages messages = {messages}/>\n      <OutGoing callForSendMessage = {callForSendMessage}/>\n      <Logout handleClick = {handleClick}/>\n    </div>\n  )\n}\n\nexport default MiddleWare;\n","//jshint esversion:6\nimport React, {useState} from 'react';\nfunction Login({callForLogin}){\n      const [username, setusername] = useState('');\n      const handleClick = (e) => {\n        callForLogin(username);\n      }\n      const handleUserTyping = (e) => {\n        setusername(e.target.value);\n      }\n      return(\n        <div className = \"login\">\n          <label>Username: <input onKeyUp = {handleUserTyping} /></label>\n          <button className = \"login-button\" onClick = {handleClick}>LOGIN</button>\n        </div>\n      )\n}\nexport default Login;\n","import React from 'react';\nfunction Error({error}){\n  console.log(error);\n  return(\n    <div className = \"error\">\n      <p>{error}</p>\n    </div>\n  )\n}\nexport default Error;\n","//jshint esversion: 6\nimport React, {useState, useEffect} from 'react';\nimport MiddleWare from './MiddleWare';\nimport Login from './Login';\nimport Error from './Error';\nimport './App.css';\nimport * as services from './services';\n\nfunction App(){\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [error, setError] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const callForLogin = (username) => {\n    services.fetchLogIn(username)\n    .then((data) => {\n      setUsers(data.users)\n      setMessages(data.messages)\n      setError('')\n      setisLoggedIn(true)\n    })\n    .catch((err)=>{\n      setError(err.code);\n    });\n  }\n  const callForSendMessage = (message) => {\n    services.sendMessage(message)\n    .then((data) => {\n      setUsers(data.users);\n      setMessages(data.messages);\n    })\n    .catch((err) => {\n      setError(err);\n    });\n  }\n\nconst handleClick = () => {\n  services.fetchLogOut()\n  .then(() => {\n    setisLoggedIn(false);\n  })\n  .catch((err) => {\n    setError(err.code);\n  });\n}\n\n\nuseEffect(() => {\n  services.fetchLoginStatus()\n  .then((response) => {\n    setisLoggedIn(true);\n    callForLogin(\"existingUser\");\n  })\n  .catch((err) => {\n    setisLoggedIn(false);\n  });\n}, []);\n\nlet mainComponent = undefined;\nif(isLoggedIn){\n  mainComponent = <MiddleWare users = {users} messages = {messages} handleClick = {handleClick} callForSendMessage = {callForSendMessage}/>\n}\nelse{\n  mainComponent = <Login callForLogin = {callForLogin}/>\n}\n\n\n\nreturn (\n  <div className = \"App\">\n    {mainComponent}\n    <Error error = {error}/>\n  </div>\n)}\n\nexport default App;\n","//jshint esversion:6\nexport const fetchLogIn = (username)=>{\n  return fetch('/login', {\n    method:'POST',\n    headers:new Headers({\n      'content-type':'application/json',\n    }),\n    body:JSON.stringify({username})\n  })\n  .catch(()=>{\n    return Promise.reject({code:'network-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n\n\n\n\nexport const fetchLogOut = ()=>{\n  return fetch('/logout', {\n    method:'DELETE'\n  })\n  .catch(()=>{\n    return Promise.reject({code:'network-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n\n\nexport const sendMessage = (message)=>{\n  return fetch('/sendMessage', {\n    method:'POST',\n    headers:new Headers({\n      'content-type':'application/json',\n    }),\n    body:JSON.stringify({message})\n  })\n  .catch(()=>{\n    return Promise.reject({code:'network-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n\nexport const fetchLoginUsers = ()=>{\n  return fetch('/users', {\n    method:'GET'\n  })\n  .catch(()=>{\n    return Promise.reject({code:'network-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n\n\nexport const fetchMessages = ()=>{\n  return fetch('/messages', {\n    method:'GET'\n  })\n  .catch(()=>{\n    return Promise.reject({code:'network-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n\n\nexport const fetchLoginStatus = ()=>{\n  return fetch('/login', {\n    method:'GET'\n  })\n  .catch(()=>{\n    return Promise.reject({code:'newwork-error'});\n  })\n  .then((response)=>{\n    if(!response.ok){\n      return response.json().then(result=>Promise.reject(result));\n    }\n    return response.json();\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}