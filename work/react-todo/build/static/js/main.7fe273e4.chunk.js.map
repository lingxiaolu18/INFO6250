{"version":3,"sources":["Login.jsx","AddTask.jsx","AddTaskBox.jsx","Todo.jsx","Todos.jsx","Theme.jsx","ToggleDone.jsx","SortPane.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["Login","callLoginService","useState","username","setusername","className","onChange","e","target","value","onClick","AddTask","userName","callAddTaskService","taskName","setTaskName","AddTaskBox","Todo","showDoneTasks","tasks","setTasks","handleDone","taskId","title","removeTask","editTask","task","setTask","handleRemove","handleEdit","handleKeyUp","handleOnChange","console","log","checked","isDone","i","length","done","key","taskid","type","toString","Todos","map","currTask","Theme","setTheme","callUpdateTheme","htmlFor","name","id","ToggleDone","setShowDoneTasks","isChecked","setIsChecked","SortPane","sortDone","sortNotDone","sortAscending","sortDescending","sortMethod","setSortMethod","App","isLoggedIn","setIsLoggedIn","setUserName","theme","useEffect","fetch","method","catch","Promise","reject","code","then","response","ok","json","result","loggedInUser","data","callFetchTheme","pullTodoList","err","services","userTheme","currData","collections","dataStream","Object","keys","currTaskId","collection","j","push","message","addTaskBox","headers","Headers","body","JSON","stringify","temp","todos","doneOrNot","removedTask","newTask","sort","a","b","setThemePane","toogleDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.7fe273e4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nfunction Login({callLoginService}){\n    const [username, setusername] = useState('');\n    const handleClick = (e) => {\n        callLoginService(username);\n        setusername('');\n    }\n    const handleKeyUp = (e) => {\n        setusername(e.target.value);\n    }\n    return (\n        <div className = \"login\">\n            <label>Username:<input onChange = {handleKeyUp} value = {username}/></label>\n            <button className = \"login-button\" onClick = {handleClick}>LOGIN!</button>\n        </div>\n    )\n}\n\n\nexport default Login;","import React, {useState} from 'react';\nfunction AddTask({userName, callAddTaskService}){\n    const [taskName, setTaskName] = useState('');\n    const handleOnChange = (e) => {\n        setTaskName(e.target.value);\n    }\n    const handleClick = (e) => {\n        callAddTaskService(userName, taskName);\n        setTaskName('');\n    }\n    return (\n        <div>\n            <label>New Task:<input onChange = {handleOnChange} value = {taskName}/></label>\n            <button onClick = {handleClick}>append</button>\n        </div>\n    )\n}\n\nexport default AddTask;","import React from 'react';\nimport AddTask from './AddTask';\n\nfunction AddTaskBox({userName, callAddTaskService}){\n    return (\n        <div>\n            <AddTask userName = {userName} callAddTaskService = {callAddTaskService}/>\n        </div>\n    )\n}\n\nexport default AddTaskBox;","import React, {useState} from 'react';\nfunction Todo({showDoneTasks, tasks, setTasks, handleDone, taskId, title, removeTask, editTask, username}){\n    const [task, setTask] = useState(title);\n    // const [isDone, setIsDone] = useState(false);\n    const handleRemove = () => {\n        removeTask(username, taskId);\n    };\n    const handleEdit = () => {\n        editTask(username, taskId, task);\n    }\n    const handleKeyUp = (e) => {\n        setTask(e.target.value);\n    }\n    const handleOnChange= (e) => {\n        console.log(e.target.checked);\n        // setIsDone(e.target.checked);\n        handleDone(tasks, taskId, setTasks, e.target.checked);\n    }\n    let isDone = false;\n    for(let i = 0; i < tasks.length; i++){\n        if(tasks[i].taskId === taskId){\n            isDone = tasks[i].done;\n            break;\n        }\n    }\n    if(!showDoneTasks){\n        return (\n            <li \n                className = {isDone.toString()}\n                key={taskId}\n                taskid={taskId}>\n                <span><input type=\"checkbox\" onChange = {handleOnChange}></input></span>\n                <input onChange = {handleKeyUp} value = {task}></input>\n                <span><button onClick = {handleEdit}>EDIT</button></span>\n                <span><button onClick = {handleRemove}>REMOVE</button></span>\n            </li>\n        )\n    }\n    else{\n        return (\n            <li \n                key={taskId}\n                taskid={taskId}>\n                <span><input type=\"checkbox\" onChange = {handleOnChange}></input></span>\n                <input onChange = {handleKeyUp} value = {task}></input>\n                <span><button onClick = {handleEdit}>EDIT</button></span>\n                <span><button onClick = {handleRemove}>REMOVE</button></span>\n            </li>\n        )\n    }\n}\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\nfunction Todos({showDoneTasks, setTasks, handleDone, removeTask, editTask, username, tasks}){\n    \n    // if(showDoneTasks){\n        return (\n            <div>\n                <ul>\n                {tasks.map(currTask => (\n                    <Todo\n                        showDoneTasks = {showDoneTasks}\n                        tasks = {tasks}\n                        setTasks = {setTasks}\n                        handleDone = {handleDone}\n                        removeTask = {removeTask}\n                        editTask = {editTask}\n                        key={currTask.taskId}\n                        username = {username}\n                        taskId = {currTask.taskId}\n                        title = {currTask.task}\n                    />\n                ))}\n                </ul>\n            </div>\n        )\n    // }\n    // else{\n    //     const temp = [];\n    //     for(let i = 0; i < tasks.length; i++){\n    //         if(!tasks[i].done){\n    //             temp.push(tasks[i]);\n    //         }\n    //     }\n    //     return (\n    //         <div>\n    //             <ul>\n    //             {temp.map(currTask => (\n    //                 <Todo\n    //                     tasks = {tasks}\n    //                     setTasks = {setTasks}\n    //                     handleDone = {handleDone}\n    //                     removeTask = {removeTask}\n    //                     editTask = {editTask}\n    //                     key={currTask.taskId}\n    //                     username = {username}\n    //                     taskId = {currTask.taskId}\n    //                     title = {currTask.task}\n    //                 />\n    //             ))}\n    //             </ul>\n    //         </div>\n    //     )\n    // }\n}\nexport default Todos;","import React, {useState} from 'react';\nfunction Theme({setTheme, callUpdateTheme, userName}){\n    // const [value, setValue] = useState('light');\n    // const handleClick = (e) => {\n    //     console.log(value);\n    //     setTheme(value);\n    // }\n    const handleOnChange = (e)=>{\n        console.log(e.target.value);\n        setTheme(e.target.value);\n        callUpdateTheme(userName, e.target.value);\n    }\n    return (\n        <div>\n            <label htmlFor=\"theme-select\">Choose a theme:</label>\n            <select onChange={handleOnChange} name=\"themes\" id=\"theme-select\">\n                <option value=\"\">--Please choose a theme--</option>\n                <option value=\"colorful\">colorful</option>\n                <option value=\"dark\">dark</option>\n                <option value=\"light\">light</option>\n            </select>\n            {/* <button onClick={handleClick}>SUBMIT</button> */}\n        </div>\n    )\n}\n\nexport default Theme;","import React, {useState} from 'react';\nfunction ToggleDone({setShowDoneTasks}){\n    const [isChecked, setIsChecked] = useState(true);\n    const handleOnChange = (e) => {\n        // handleToggleDone(showDoneTasks, e.target.checked);\n        setIsChecked(e.target.checked);\n        setShowDoneTasks(isChecked);\n    };\n    return (\n        <div>\n            <label><input type = 'checkbox' onChange = {handleOnChange} checked = {isChecked}></input>Hide Done</label>\n        </div>\n    )\n}\n\n\nexport default ToggleDone;","import React, {useState} from 'react';\nfunction SortPane({sortDone, sortNotDone, sortAscending, sortDescending}){\n    const [sortMethod, setSortMethod] = useState('');\n    const handleOnChange = (e) => {\n        setSortMethod(e.target.value);\n    }\n    const handleClick = () => {\n        if(sortMethod === 'Alphabetically Ascending'){\n            sortAscending();\n        }\n        else if(sortMethod === 'Alphabetically Descending'){\n            sortDescending();\n        }\n        else if(sortMethod === 'Done First'){\n            sortDone();\n        }\n        else if(sortMethod === 'Not Done First'){\n            sortNotDone();\n        }\n    }\n\n    return (\n        <div>\n            <label htmlFor=\"sort-select\">sort by:</label>\n            <select onChange = {handleOnChange}>\n                <option>--Please choose sort method--</option>\n                <option>Alphabetically Ascending</option>\n                <option>Alphabetically Descending</option>\n                <option>Done First</option>\n                <option>Not Done First</option>\n            </select>\n            <button onClick = {handleClick}>Refresh</button>\n        </div>\n    )\n}\nexport default SortPane;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Login from './Login';\nimport AddTaskBox from './AddTaskBox';\nimport Todos from './Todos';\nimport Theme from './Theme';\nimport ToggleDone from './ToggleDone';\nimport SortPane from './SortPane';\nimport * as services from './services';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [theme, setTheme] = useState('light'); //default theme\n  const [showDoneTasks, setShowDoneTasks] = useState(true);\n  \n  //刷新时导致所有state为空，需要用cookie重新获取用户名\n  useEffect(() => {\n    services.fetchLoginStatus()\n    .then((response) => {\n      console.log(\"You are logged in!\");\n      const loggedInUser = response.data.username;\n      const userTheme = response.data.theme;\n      setUserName(loggedInUser);\n      setIsLoggedIn(true);//don't comment this line, retrieve data once refreshed\n      callFetchTheme(loggedInUser);\n      pullTodoList(loggedInUser);\n    })\n    .catch((err) => {\n      console.log(\"Not logged in!\");\n      setIsLoggedIn(false);\n    });\n  }, []);\n\n  const callLoginService = (username) => {\n    setUserName(username);\n    services.fetchLogIn(username)\n    .then((data) => {\n      setIsLoggedIn(true);\n      //fetch user theme\n      callFetchTheme(data.data.username);\n      pullTodoList(data.data.username);\n      console.log(\"login successful\");\n    })\n    .catch((err) => {\n      console.log(\"login failed\");\n      //change err label here\n    });\n  };\n\n  const callFetchTheme = (username) => {\n    services.fetchTheme(username)\n    .then((data) => {\n      const userTheme = data.data;\n      console.log(userTheme);\n      if(userTheme !== 'funky'){\n        setTheme(userTheme);\n      }\n    })\n    .catch((err) => {\n      console.log('fetch theme failed');\n    });\n  };\n\n\n  const callUpdateTheme = (username, theme) => {\n    services.fetchUpdateTheme(username, theme)\n    .then((data) => {\n      console.log(data.data);\n    })\n    .catch((e) => {\n      console.log(e);\n    });\n  };\n\n\n  const callAddTaskService = (username, task) => {\n    services.fetchAddTask(username, task)\n    .then((data) => {\n      //data改成array\n      const temp = services.filteredData(data);\n      tasks.push(temp);\n      setTasks(tasks);\n    })\n    .catch((err) => {\n      console.log(err.message);\n      //change err label here\n    });\n    pullTodoList(userName);\n  };\n\n  const pullTodoList = (username) => {\n    services.fetchAllTasks(username)\n    .then((data) => {\n      const currData = services.filteredDataStream(data);\n      setTasks(currData);\n    })\n    .catch((err) => {\n      console.log(err.message);\n    });\n  };\n\n  const updateTask = (username, taskId, task) => {\n    services.fetchUpdateTask(username, taskId, task)\n    .then((data) => {\n      // data.data = newTask; newTask = {task:..., taskId:...}\n      const newTask = data.data;\n      console.log(newTask);\n      const temp = [];\n      for(let i = 0; i < tasks.length; i++){\n        if(tasks[i].taskId !== newTask.taskId){\n          temp.push(tasks[i]);\n        }\n        else{\n          temp.push(newTask);\n        }\n      }\n      setTasks(temp);\n    })\n    .catch((err) => {\n      console.log(err.message);\n    });\n  };\n\n  const removeTask = (username, taskId) => {\n    services.fetchDeleteOneTask(username, taskId)\n    .then((data) => {\n      //data.data = task; task = removed task = {task:..., taskId:...}\n      const removedTask = data.data;\n      const temp = [];\n      for(let i = 0; i < tasks.length; i++){\n        if(tasks[i].taskId !== removedTask.taskId){\n          temp.push(tasks[i]);\n        }\n      }\n      setTasks(temp); \n    })\n    .catch((err) => {\n      console.log(err.message);\n    });\n  };\n\n  const handleDone = (tasks, taskId, setTasks, doneOrNot) => {\n    for(let i = 0; i < tasks.length; i++){\n      if(tasks[i].taskId === taskId){\n        tasks[i].done = doneOrNot;\n        break;\n      }\n    }\n    setTasks(tasks);\n  }\n\n  const sortAscending = () => {\n    function compare(a, b){\n      if(a.task > b.task){\n        return 1;\n      }\n      else if(a.task < b.task){\n        return -1;\n      }\n      else return 0;\n    }\n    setTasks([...tasks.sort(compare)]);\n  }\n\n  const sortDescending = () => {\n    function compare(a, b){\n      if(a.task > b.task){\n        return -1;\n      }\n      else if(a.task < b.task){\n        return 1;\n      }\n      else return 0;\n    }\n    setTasks([...tasks.sort(compare)]);\n  }\n\n  const sortDone = () => {\n    function compare(a, b){\n      if(a.done > b.done){\n        return -1;\n      }\n      else if(a.done < b.done){\n        return 1;\n      }\n      else return 0;\n    }\n    setTasks([...tasks.sort(compare)]);\n  }\n\n  const sortNotDone = () => {\n    function compare(a, b){\n      if(a.done > b.done){\n        return 1;\n      }\n      else if(a.done < b.done){\n        return -1;\n      }\n      else return 0;\n    }\n    setTasks([...tasks.sort(compare)]);\n  }\n\n  const addTaskBox = isLoggedIn? <AddTaskBox userName = {userName} callAddTaskService = {callAddTaskService}/> : <Login callLoginService = {callLoginService}/>;\n  const todos = isLoggedIn? <Todos showDoneTasks = {showDoneTasks} tasks = {tasks} setTasks = {setTasks} handleDone = {handleDone} removeTask = {removeTask} editTask = {updateTask} username = {userName} tasks = {tasks}/> : '';\n  const sort = isLoggedIn? <SortPane sortDone = {sortDone} sortNotDone ={sortNotDone} sortAscending = {sortAscending} sortDescending = {sortDescending} tasks = {tasks} setTasks = {setTasks}/> : '';\n  const setThemePane = isLoggedIn? <Theme setTheme={setTheme} callUpdateTheme={callUpdateTheme} userName={userName}/> : '';\n  const toogleDone = isLoggedIn? <ToggleDone setShowDoneTasks = {setShowDoneTasks}/> : '';\n  return (\n    <div>\n      <div className={theme}>\n        {addTaskBox}\n        {setThemePane}\n        {sort}\n        {toogleDone}\n        {todos}\n      </div>\n    </div>\n  );\n}\nexport default App;\n","export const fetchLogIn = (username)=>{\n    return fetch('/session', {\n      method:'POST',\n      headers:new Headers({\n        'content-type':'application/json',\n      }),\n      body:JSON.stringify({username})\n    })\n    .catch(()=>{\n      return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result=>Promise.reject(result));\n      }\n      return response.json();\n    });\n  };\n  \nexport const fetchLogOut = ()=>{\n    return fetch('/session', {\n      method:'DELETE'\n    })\n    .catch(()=>{\n      return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result=>Promise.reject(result));\n      }\n      return response.json();\n    });\n  };\n\nexport const fetchLoginStatus = ()=>{\n    return fetch('/session', {\n      method:'GET'\n    })\n    .catch(()=>{\n      return Promise.reject({code:'newwork-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result=>Promise.reject(result));\n      }\n      return response.json();\n    });\n  };\n\n\nexport const fetchTheme = (username)=>{\n    return fetch('/theme/' + username, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));    \n        }\n        return response.json();\n    });\n};\n\nexport const fetchUpdateTheme = (username, theme)=>{\n    return fetch('/theme/' + username, {\n        method:'PUT',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({theme})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\n\nexport const fetchAllTasks = (username)=>{\n    return fetch('/tasks/' + username, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result)); \n        }\n        return response.json();\n    });\n};\n\n\nexport const fetchDeleteAllTasks = (username)=>{\n    return fetch('/tasks/' + username, {\n        method:'DELETE'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result)); \n        }\n        return response.json();\n    });\n};\n\n\nexport const fetchAddTask = (username, task)=>{\n    return fetch('/tasks/' + username, {\n        method:'POST',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({task})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchOneTask = (username, taskId)=>{\n    return fetch('/tasks/' + username + '/' + taskId, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchUpdateTask = (username, taskId, task)=>{\n    return fetch('/tasks/' + username + '/' + taskId, {\n        method:'PUT',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({task})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchDeleteOneTask = (username, taskId)=>{\n    return fetch('/tasks/' + username + '/' + taskId, {\n        method:'DELETE'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\n\n\nexport const filteredDataStream = (data) => {\n    const collections = [];\n    const dataStream = data.data;\n    // console.log(Object.keys(dataStream));\n    for(let i = 0; i < Object.keys(dataStream).length; i++){\n        const currTaskId = Object.keys(dataStream)[i];\n        const collection = {};\n        collection.task = '';\n        collection.taskId = currTaskId;\n        collection.done = false;\n        for(let j = 0; j < Object.keys(dataStream[currTaskId]).length - 1; j++){\n            collection.task += dataStream[currTaskId][j];\n        }\n        collections.push(collection);\n    }\n    console.log(collections);\n    return collections;\n}\n\nexport const filteredData = (data) => {\n    const dataStream = data.data;\n    const collection = {};\n    collection.task = '';\n    collection.taskId = dataStream.taskId;\n    collection.done = false;\n    for(let key = 0; key < Object.keys(dataStream).length - 1; key++){\n        collection.task += dataStream[key];\n    }\n    return collection;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}