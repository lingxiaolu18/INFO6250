{"version":3,"sources":["logo.svg","LoginPane.jsx","PostCard.jsx","Posts.jsx","Error.jsx","SignupPane.jsx","Navbar.jsx","Comment.jsx","CommentPane.jsx","PostDetail.jsx","Commit.jsx","About.jsx","CategoryCard.jsx","Category.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["module","exports","LoginPane","context","useContext","StateContext","useState","username","setUsername","password","setPassword","buttonDisabled","setButtonDisabled","className","src","logo","alt","onChange","e","target","value","length","placeholder","type","onClick","callLogin","disabled","Dispatch","payload","PostCard","post","img","title","category","timeStamp","fetchPostDetail","postId","Posts","postsToDisplay","map","key","Error","err","SignupPane","callRegister","Navbar","state","userName","fetchAllPosts","getCategories","Comment","comment","author","date","content","CommentPane","comments","PostDetail","setComment","selectedPost","rows","cols","addComment","userId","Commit","setPost","onInput","commitPost","About","href","CategoryCard","getPostsUnderCategory","Category","categories","React","createContext","initialState","isLoggedIn","showSignup","error","posts","showCommit","showAbout","showCategory","reducer","action","data","App","useReducer","dispatch","fetch","method","catch","Promise","reject","code","then","response","ok","json","result","message","useEffect","Provider","commentorName","headers","Headers","body","JSON","stringify","services","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.58f67e75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useContext, useState} from 'react';\nimport logo from './logo.svg';\nimport {StateContext} from './App';\n\nfunction LoginPane(){\n    const context = useContext(StateContext);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [buttonDisabled, setButtonDisabled] = useState(true);\n    const handleSignup = () => {\n        context.Dispatch({type: 'TOGGLE_SIGNUP', payload: true});\n        context.Dispatch({type: 'ERR_FOUND', payload: ''});\n    };\n    const handleLogin = () => {\n        context.callLogin(username, password);\n    }\n    const handleNameChange = (e) => {\n        setUsername(e.target.value);\n        if(e.target.value.length > 0 && password.length > 0){\n            setButtonDisabled(false);\n        }\n        else{\n            setButtonDisabled(true);\n        }\n    }\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value);\n        if(e.target.value.length > 0 && username.length > 0){\n            setButtonDisabled(false);\n        }\n        else{\n            setButtonDisabled(true);\n        }\n    }\n    return(\n        <div className = 'login-card'>\n            <img src = {logo} alt = \"login-logo\" className = \"App-logo\"/>\n            <div>\n                <span>Username</span><input onChange = {handleNameChange} placeholder = \"2-20 chars in[A-Za-z0-9]\"></input><br/><br/>\n                <span>Password  </span><input onChange = {handlePasswordChange} type = \"password\" placeholder = \"\"></input><br/><br/>\n                <button onClick = {handleLogin} disabled = {buttonDisabled}>LOGIN</button><br/><br/>\n                <label className='anchorTag-text'>Don't have an account yet?</label><button className ='anchorTag' onClick = {handleSignup}>SIGNUP</button><br/><br/><br/>\n            </div>\n        </div>\n    )\n}\n\n\n\n\nexport default LoginPane;","import React, {useContext} from 'react';\nimport {StateContext} from './App';\nfunction PostCard({post}){\n    const context = useContext(StateContext);\n    const handleClick = () => {\n        context.fetchPostDetail(post.username, post.postId);\n    }\n    return(\n        <div className = 'posts-card'>\n        <img src= {post.img} alt=\"Avatar\"/>\n            <div className = 'container'>\n                <h4><b>{post.title}</b></h4>\n                <p>Author:{post.username}</p>\n                <p>Category: {post.category}</p>\n                <p>Date:{post.timeStamp}</p>\n                <button onClick = {handleClick} className = 'anchorTag'>see more...</button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default PostCard;","import React from 'react';\nimport PostCard from './PostCard';\nfunction Posts({postsToDisplay}){\n    return(\n        <div className = \"posts-container\">\n            {\n                postsToDisplay.map(post => (\n                    <PostCard\n                        key = {post.postId}\n                        post = {post}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Posts;","import React from 'react';\n\nfunction Error({err}){\n    return(\n        <div className = \"error-message\">\n            <p>{err}</p>\n        </div>\n    )\n}\n\nexport default Error;","import React, {useState, useContext} from 'react';\nimport logo from './logo.svg';\nimport {StateContext} from './App';\nfunction SignupPane(){\n    const context = useContext(StateContext);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [buttonDisabled, setButtonDisabled] = useState(true);\n    const handleClick = (e) => {\n        context.callRegister(username, password);\n    }\n    const handleNameChange = (e) => {\n        setUsername(e.target.value);\n        if(e.target.value.length > 0 && password.length > 0){\n            setButtonDisabled(false);\n        }\n        else{\n            setButtonDisabled(true);\n        }\n    }\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value);\n        if(e.target.value.length > 0 && username.length > 0){\n            setButtonDisabled(false);\n        }\n        else{\n            setButtonDisabled(true);\n        }\n    }\n    return(\n        <div className = 'signup-card'>\n            <img src = {logo} alt = \"login-logo\" className = \"App-logo\"/>\n            <div>\n                <span>Username</span><input onChange = {handleNameChange} placeholder = \"\"></input><br/><br/>\n                <span>Password  </span><input onChange = {handlePasswordChange} type = \"password\" placeholder = \"\"></input><br/><br/>\n                <button onClick = {handleClick} disabled = {buttonDisabled} >signup</button><br/><br/>\n            </div>\n        </div>\n    )\n}\n\n\n\n\nexport default SignupPane;","import React, {useContext} from 'react';\nimport {StateContext} from './App';\nfunction Navbar(){\n    const context = useContext(StateContext);\n    const handleClickHome = () => {\n        context.Dispatch({type: 'SELECT_POST', payload:''});\n        context.Dispatch({type: 'SHOW_COMMIT', payload: false});\n        context.Dispatch({type: 'SHOW_ABOUT', payload: false});\n        context.Dispatch({type: 'SHOW_CATEGORY', payload: false});\n        context.fetchAllPosts();\n    }\n    const handleClickCommit = () => {\n        context.Dispatch({type: 'SELECT_POST', payload:''});\n        context.Dispatch({type: 'SHOW_COMMIT', payload: true});\n        context.Dispatch({type: 'SHOW_ABOUT', payload: false});\n        context.Dispatch({type: 'SHOW_CATEGORY', payload: false});\n    }\n    const handleClickCategory = () => {\n        context.getCategories();\n        context.Dispatch({type: 'SHOW_CATEGORY', payload: true});\n        context.Dispatch({type: 'SELECT_POST', payload:''});\n        context.Dispatch({type: 'SHOW_COMMIT', payload: false});\n        context.Dispatch({type: 'SHOW_ABOUT', payload: false});\n    }\n    const handleClickAbout = () => {\n        context.Dispatch({type: 'SHOW_ABOUT', payload: true});\n        context.Dispatch({type: 'SHOW_CATEGORY', payload: false});\n        context.Dispatch({type: 'SELECT_POST', payload:''});\n        context.Dispatch({type: 'SHOW_COMMIT', payload: false});\n    }\n    return (\n        <div className = 'navbar'>\n            <ul>\n                <li><p>Welcome, {context.state.userName}!</p></li>\n                <li><button onClick = {handleClickHome} className = 'nav-anchorTag'>Home</button></li>\n                <li><button onClick = {handleClickCommit} className = 'nav-anchorTag'>Commit</button></li>\n                <li><button onClick = {handleClickCategory}className = 'nav-anchorTag'>Category</button></li>\n                <li><button onClick = {handleClickAbout} className = 'nav-anchorTag'>About</button></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\n\nfunction Comment({comment}){\n    return(\n        <div>\n            <label>from:{comment.author}</label>\n            <label>@{comment.date}</label><br/>\n            <p>{comment.content}</p>\n        </div>\n    )\n}\n\nexport default Comment;","import React, {useContext} from 'react';\nimport {StateContext} from './App';\nimport Comment from './Comment';\nfunction CommentPane({comments}){\n    let key = 1;\n    return(\n        <div>\n            {comments.map(comment => (\n                <Comment \n                    key = {key++}\n                    comment = {comment}\n                />\n            ))}\n        </div>\n    )\n}\n\n\nexport default CommentPane;","import React, {useContext, useState} from 'react';\nimport {StateContext} from './App';\nimport CommentPane from './CommentPane';\nfunction PostDetail(){\n    const context = useContext(StateContext);\n    const [comment, setComment] = useState('');\n    const handleOnChange = (e) => {\n        setComment(e.target.value);\n    }\n    const handleClick = () => {\n        context.addComment(\n            context.state.selectedPost.userId,\n            context.state.selectedPost.postId,\n            context.state.userName,\n            comment \n        );\n    }\n    return(\n        <div className = 'post-detail'>\n            <h2>{context.state.selectedPost.title}</h2>\n            <h3>{context.state.selectedPost.username}</h3>\n            <h3>{context.state.selectedPost.timeStamp}</h3>\n            <img className = 'img-detail' src = {context.state.selectedPost.img} alt = 'img'></img>\n            <p>{context.state.selectedPost.content}</p>\n            <div>\n                <label>Comment here:</label><br/>\n                <textarea onChange = {handleOnChange} rows = '3' cols = '30'></textarea><br/>\n                <button onClick = {handleClick} >submit</button>\n            </div>\n            <CommentPane comments = {context.state.selectedPost.comments}/>\n        </div>\n    )\n}\n\nexport default PostDetail;","import React, {useContext, useState} from 'react';\nimport {StateContext} from './App';\nfunction Commit(){\n    const context = useContext(StateContext);\n    const [post, setPost] = useState({username: context.state.userName});\n    const handleTitle = (e) => {\n        setPost({...post, title: e.target.value});\n    }\n    const handleCategory = (e) => {\n        setPost({...post, category: e.target.value});\n    }\n    const handleContent = (e) => {\n        setPost({...post, content: e.target.value});\n    }\n    const handleImg = (e) => {\n        setPost({...post, img: e.target.value});\n    }\n    const handleClick = () => {\n        context.commitPost(context.state.userName, post);\n    }\n    return(\n        <div className = 'commit-box'>\n            <label>Title</label><input onChange = {handleTitle}></input><br/>\n            <label>Category</label><input onChange = {handleCategory}></input><br/>\n            <label>Img url(if any)</label><input onInput = {handleImg}></input><br/>\n            <label>Content:</label><br/>\n            <textarea onChange = {handleContent} rows = '30' cols = '100'></textarea><br/>\n            <button onClick = {handleClick}>submit</button><br/>\n        </div>\n    )\n}\n\nexport default Commit;","import React from 'react';\nfunction About(){\n    return (\n        <div>\n            <label>About Me</label><br/>\n            <p>\n            Current graduate student with growth mindset, a self-motivated, ambitious individual with fast problem-solving,\n            self-study and team collaboration skills, dedicated in software engineering and related industries. Actively seeking\n            software engineer internships beginning Summer 2021 primarily in Seattle area but open to relocate. Want to become a\n            sophisticated software engineer with strong ability to design and implement products to change people’s experience\n            </p><br/>\n            <label>Email Me@</label><p>feng.shiy@northeastern.edu</p><br/>\n            <label>Connect Me On LinkedIn</label><a href = 'https://www.linkedin.com/in/shiyu-feng-a10429180/'>Shiyu Feng</a>\n        </div>\n    )\n}\n\nexport default About;","import React, {useContext} from 'react';\nimport {StateContext} from './App';\nfunction CategoryCard({category}){\n    const context = useContext(StateContext);\n    const handleClick = (e) => {\n        context.getPostsUnderCategory(e.target.value);\n    }\n    return(\n        <div className = 'category-card'>\n            <img className = 'img-category' src = {category.img} alt = 'Avatar'/>\n            <div>\n                <button onClick = {handleClick} value = {category.title} className = 'nav-anchorTag'>{category.title}</button>\n            </div>\n        </div>\n    )\n}\n\nexport default CategoryCard;","import React, {useContext} from 'react';\nimport {StateContext} from './App';\nimport CategoryCard from './CategoryCard';\nfunction Category(){\n    const context = useContext(StateContext);\n    let key = 1;\n    return (\n        <div className = 'categories'>\n            {context.state.categories.map(category => (\n                <CategoryCard\n                   key = {key++}\n                   category = {category} \n                />\n            ))}\n        </div>\n    )\n}\n\nexport default Category;","import React, {useEffect, useReducer} from 'react';\nimport './App.css';\nimport * as services from './services';\nimport LoginPane from './LoginPane';\nimport Posts from './Posts';\nimport Error from './Error';\nimport SignupPane from './SignupPane';\nimport Navbar from './Navbar';\nimport PostDetail from './PostDetail';\nimport Commit from './Commit';\nimport About from './About';\nimport Category from './Category';\n\nexport const StateContext = React.createContext();\n\nconst initialState = {\n  isLoggedIn: false,\n  showSignup: false,\n  userName: '',\n  error: '',\n  posts: [],\n  categories: [],\n  selectedPost: '',\n  showCommit: false,\n  showAbout: false,\n  showCategory: false\n};\n\nconst reducer = (state, action) => {\n  switch(action.type){\n    case 'REGISTER_SUCCESS':\n      return {...state, showSignup: false}\n    case 'REGISTER_FAILED':\n      return {...state, showSignup: true, error: action.payload}\n    case 'LOGIN_SUCCESS':\n      return {...state, isLoggedIn: true, userName: action.payload};\n    case 'LOGIN_FAILED':\n      return {...state, isLoggedIn: false, error: action.payload};\n    case 'POSTS_FETCHED':\n      return {...state, posts: action.payload.data}\n    case 'ERR_FOUND':\n      return {...state, error: action.payload}\n    case 'TOGGLE_SIGNUP':\n      return {...state, showSignup: action.payload}\n    case 'SELECT_POST':\n      return {...state, selectedPost: action.payload}\n    case 'SHOW_COMMIT':\n      return {...state, showCommit: action.payload}\n    case 'SHOW_ABOUT':\n      return {...state, showAbout: action.payload}\n    case 'SHOW_CATEGORY':\n      return {...state, showCategory: action.payload}\n    case 'SET_CATEGORY':\n      return {...state, categories: action.payload}\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const callRegister = (username, password) => {\n  services.fetchRegister(username, password)\n  .then((response) => {\n    dispatch({type: 'REGISTER_SUCCESS', payload: username});\n  })\n  .catch((e) => {\n    dispatch({type: 'REGISTER_FAILED', payload: e.message});\n  })\n}\n\nconst callLogin = (username, password) => {\n  services.fetchLogin(username, password)\n  .then((response) => {\n    dispatch({type: 'LOGIN_SUCCESS', payload: username});\n    fetchAllPosts();\n  })\n  .catch((e) => {\n    dispatch({type: 'ERR_FOUND', payload: e.message});\n  })\n}\n\nconst fetchAllPosts = () => {\n  services.fetchAllUserPosts()\n  .then(response => {\n    dispatch({type: 'POSTS_FETCHED', payload: response})\n    dispatch({type: 'ERR_FOUND', payload: ''})\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n};\n\nconst fetchPostDetail = (username, postId) => {\n  services.fetchOnePost(username, postId)\n  .then(response => {\n    dispatch({type: 'SELECT_POST', payload: response.data})\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n};\n\nconst commitPost = (username, post) => {\n  services.fetchAddPost(username, post)\n  .then(response => {\n    fetchAllPosts();\n    dispatch({type: 'SHOW_COMMIT', payload: false});\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n};\n\nconst getCategories = () => {\n  services.fetchCategories()\n  .then(response => {\n    dispatch({type: 'SET_CATEGORY', payload: response.data});\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n};\n\nconst getPostsUnderCategory = (category) => {\n  services.fetchPostUnderCategory(category)\n  .then(response => {\n    dispatch({type: 'POSTS_FETCHED', payload: response});\n    dispatch({type: 'SHOW_CATEGORY', payload: false});\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n};\n\nconst addComment = (userId, postId, commentorName, comment) => {\n  services.addComment(userId, postId, commentorName, comment)\n  .then(response => {\n    dispatch({type: 'SELECT_POST', payload: response.data});\n  })\n  .catch(err => {\n    dispatch({type: 'ERROR_FOUND', payload: err.message})\n  });\n}\n\n  useEffect(() => {\n    services.fetchLoginStatus()\n    .then((response) => {\n      dispatch({type: 'LOGIN_SUCCESS', payload: response.data.username})\n      fetchAllPosts();\n    })\n    .catch((err) => {\n      dispatch({type: 'ERR_FOUND', payload: err.message});\n    });\n  }, []);\n\n  return (\n    <StateContext.Provider value = {{addComment: addComment, fetchAllPosts : fetchAllPosts, getPostsUnderCategory: getPostsUnderCategory, state: state, Dispatch: dispatch, callRegister: callRegister, callLogin: callLogin, fetchPostDetail: fetchPostDetail, commitPost: commitPost, getCategories: getCategories}}>\n    <div className=\"App\">\n      <div className = \"Content\">\n        {state.error? <Error err = {state.error}/> : ''}\n        {state.isLoggedIn? <Navbar/> : ''}\n        {state.showSignup? <SignupPane/> : state.isLoggedIn? '' : <LoginPane dispatch = {dispatch}/>}\n        {state.isLoggedIn? state.showCategory? <Category/> : state.showAbout? <About/> : state.showCommit? <Commit/> : state.selectedPost? <PostDetail/> : <Posts postsToDisplay = {state.posts}/> : ''}\n        <div className = 'footer-container'>\n        <footer className = 'footer'>\n          ©2020 Copyright: Shiyu Feng\n         </footer>\n        </div>\n      </div>\n    </div>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","\n\nexport const fetchLoginStatus = ()=>{\n    return fetch('/session', {\n      method:'GET'\n    })\n    .catch(()=>{\n      return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result=>Promise.reject(result));\n      }\n      return response.json();\n    });\n  };\n\nexport const fetchLogin = (username, password) => {\n    return fetch('/session/' + username + '/' + password, {\n        method: 'GET',\n    })\n    .catch(() => {\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response) => {\n        if(!response.ok){\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchRegister = (username, password)=>{\n    return fetch('/session', {\n      method:'POST',\n      headers:new Headers({\n        'content-type':'application/json',\n      }),\n      body:JSON.stringify({username, password})\n    })\n    .catch(()=>{\n      return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchAllUserPosts = () => {\n    return fetch('/posts', {\n        method:'GET'\n    })\n    .catch(() => {\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response) => {\n        if(!response.ok){\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchUserPosts = (username)=>{\n    return fetch('/posts/' + username, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result)); \n        }\n        return response.json();\n    });\n};\n\nexport const fetchAddPost = (username, post)=>{\n    return fetch('/posts/' + username, {\n        method:'POST',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({post})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchOnePost = (username, postId)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchUpdatePost = (username, postId, post)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'PUT',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({post})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchDeleteOnePost = (username, postId)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'DELETE'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchCategories = () => {\n    return fetch('/categories', {\n        method:'GET'\n    })\n    .catch(() => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then((response) => {\n        if(!response.ok){\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchPostUnderCategory = (category) => {\n    return fetch('/posts/category', {\n        method:'POST',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({category})\n    })\n    .catch(() => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then((response) => {\n        if(!response.ok){\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const addComment = (userId, postId, commentorName, comment) => {\n    return fetch('/posts', {\n        method: 'PATCH',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({userId, postId, commentorName, comment})\n    })\n    .catch(() => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then((response) => {\n        if(!response.ok){\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}